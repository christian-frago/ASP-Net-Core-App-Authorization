@page
@model ContactManager.Pages.Contacts.DetailsModel

@{
    ViewData["Title"] = "Details";
}
<h2 class="u-custom-font u-text u-text-body-alt-color u-text-1">Contact Details</h2>

<div>
    <dl class="row">
        <dt class="col-sm-2" style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.Name)
        </dt>
        <dd class="col-sm-10" style="color: white;">
            @Html.DisplayFor(model => model.Contact.Name)
        </dd>
        <dt class="col-sm-2" style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.Address)
        </dt>
        <dd class="col-sm-10" style="color: white;">
            @Html.DisplayFor(model => model.Contact.Address)
        </dd>
        <dt class="col-sm-2" style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.City)
        </dt>
        <dd class="col-sm-10" style="color: white;">
            @Html.DisplayFor(model => model.Contact.City)
        </dd>
        <dt class="col-sm-2" style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.State)
        </dt>
        <dd class="col-sm-10" style="color: white;">
            @Html.DisplayFor(model => model.Contact.State)
        </dd>
        <dt class="col-sm-2" style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.Zip)
        </dt>
        <dd class="col-sm-10" style="color: white;">
            @Html.DisplayFor(model => model.Contact.Zip)
        </dd>
        <dt class="col-sm-2" style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.Email)
        </dt>
        <dd class="col-sm-10" style="color: white;">
            @Html.DisplayFor(model => model.Contact.Email)
        </dd>
        <dt style="color: white;">
            @Html.DisplayNameFor(model => model.Contact.Status)
        </dt >
        <dd style="color: white;">
            @Html.DisplayFor(model => model.Contact.Status)
        </dd>
    </dl>
</div>

@if (Model.Contact.Status != ContactStatus.Approved)
{
    @if ((await AuthorizationService.AuthorizeAsync(
    User, Model.Contact, ContactOperations.Approve)).Succeeded)
    {
        <form style="display:inline;" method="post">
            <input type="hidden" name="id" value="@Model.Contact.ContactId" />
            <input type="hidden" name="status" value="@ContactStatus.Approved" />
            <button type="submit" class="btn btn-xs btn-success">Approve</button>
        </form>
    }
}

@if (Model.Contact.Status != ContactStatus.Rejected)
{
    @if ((await AuthorizationService.AuthorizeAsync(
    User, Model.Contact, ContactOperations.Reject)).Succeeded)
    {
        <form style="display:inline;" method="post">
            <input type="hidden" name="id" value="@Model.Contact.ContactId" />
            <input type="hidden" name="status" value="@ContactStatus.Rejected" />
            <button type="submit" class="btn btn-xs btn-danger">Reject</button>
        </form>
    }
}


    @if ((await AuthorizationService.AuthorizeAsync(
    User, Model.Contact,
    ContactOperations.Update)).Succeeded)
    {
        <a style="color: white;" asp-page="./Edit" asp-route-id="@Model.Contact.ContactId" class="btn btn-primary">Edit</a>
    }
    <a style="color: white;" asp-page="./Index" class="btn btn-primary">Back to List</a>
